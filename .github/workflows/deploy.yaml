name: EVVO assessment CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
#   infra:
#     name: Deploy Infrastructure
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Filter Infra Changes
#         id: filter
#         uses: dorny/paths-filter@v2
#         with:
#           filters: |
#             infra:
#               - 'infra/**'

#       - name: Deploy Terraform Infrastructure
#         if: steps.filter.outputs.infra == 'true'
#         working-directory: infra
#         run: |
#           terraform init
#           terraform apply -auto-approve

#       - name: No Infra Changes Detected
#         if: steps.filter.outputs.infra != 'true'
#         run: echo "No changes in infra folder; skipping Terraform apply."

  build-and-deploy:
    name: Build and Deploy Docker Image
    # needs: infra   # This makes build-and-deploy wait for infra to finish.
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      ECS_CLUSTER: evvo-cluster
      ECS_SERVICE: evvo-service
    #   DOCKER_IMAGE: your-dockerhub-username/your-app-name  # Replace with your actual Docker repo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Tag Docker Image
        run: |
          docker build -t timeoff .
          docker tag timeoff syedimran18/timeoff-management:latest

      - name: Push Docker Image to Docker Hub
        run: |
          docker push syedimran18/timeoff-management:latest

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set region $AWS_REGION

      - name: Force ECS Deployment
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION

  # Optional: You can add further jobs if needed
